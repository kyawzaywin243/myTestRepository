var fs= require('fs');
let createRoute=()=>{
var dir='./routes';
if (!fs.existsSync(dir)){
    fs.mkdirSync(dir);}
    fs.writeFile('./routes/user.js',`
    
let passgen = require('../helper/passgen');
let User = require('../database/user');
module.exports = (express, jwt) => {
    let router = express.Router();

    router.post('/api/login', (req, res) => {
        let email = req.body.email;
        let pass = req.body.password;

        User.findByEmail(email)
            .then(user => {
                passgen.compare(pass, user.password)
                    .then(result => {
                        let payload = { email: user.email, name: user.name };
                        let token = jwt.sign(payload, process.env.SECRET);
                        res.send({ con: true, token: token,msg:user , successmsg: "Successfully Login" });
                    })
                    .catch(err => res.send({ con: false, msg: err, errmsg: "Password Wrong" }))
            })
            .catch(err => res.send({ con: false, msg: err, errmsg: "No user with that email" }))

    });

    router.post('/api/register', (req, res) => {
        let name = req.body.name;
        let email = req.body.email;
        let password = req.body.password;

        passgen.encrypt(password)
            .then(pass => {
                let uObj = {
                    "name": name,
                    "email": email,
                    "password": pass
                };
                User.save(uObj)
                    .then(user => res.send({ con: true, msg: user , successmsg: "Successfully Register"}))
                    .catch(err => res.send({ con: false, msg: err ,errmsg: "Something Wrong"}))
            }).catch(err => res.send({ con: false, msg: err }))
    });

     return router;
    }`
     ,function (err) {
         if (err) throw err;
         console.log('saved')
       });




fs.writeFile('./routes/guest.js',`
let User = require('../database/user');

module.exports = (express) => {
    let router = express.Router();


router.get('/usersinfo', (req, res) => {
        User.all()
            .then(result => res.json({ con: true, msg: result }))
            .catch(err => res.json({ con: false, msg: err }));
    });

router.get('/getinfo',(req,res)=>{
    res.json({name:"mg kyaw kyaw",age:21})
})





 return router;

}
     `
            ,function (err) {
                if (err) throw err;
                console.log('saved')
              });
       



              fs.writeFile('./routes/admin.js',`
              let multer = require('multer');
let User = require('../database/user');

var storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, './assets/uploads')
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + "_" + file.originalname);
    }
})
var upload = multer({ storage: storage });
module.exports = (express, passport) => {
    let router = express.Router();

   
    router.get('/user/all', passport.authenticate('jwt', { session: false }), (req, res) => {
        User.all()
            .then(result => res.json({ con: true, msg: result }))
            .catch(err => res.json({ con: false, msg: err }));
    })


    router.post('/image/upload/:email', passport.authenticate('jwt', { session: false }), upload.single('image'), (req, res, next) => {
       let ppName=req.file.filename;
       let email=req.params.email;
       
        let obj = {
            "ppName": ppName,
            "email": email
        };
        console.log(email);
        console.log(ppName)
        User.update(obj)
            .then(result => res.json({ con: true, msg: req.file.filename }))
            .catch(err => res.json({ con: false, msg: err }));
    });


    router.get('/galleryView/:email', passport.authenticate('jwt', { session: false }), (req, res) => {
       let email=req.params.email;
       
        User.findByEmail(email)
            .then(result => res.json({ con: true, msg: result }))
            .catch(err => res.json({ con: false, msg: err }));
    });



    
  



    
     return router;

}
                   `
                          ,function (err) {
                              if (err) throw err;
                              console.log('saved')
                            });
}


let createHelper=()=>{
   
        var dir='./helper';
        if (!fs.existsSync(dir)){
            fs.mkdirSync(dir);
            fs.writeFile('./helper/passgen.js',`
            let bcrypt = require('bcryptjs');

            let encrypt = (pass) => {
                return new Promise((resolve, reject) => {
                    let salt = bcrypt.genSaltSync(10);
                    let encoded = bcrypt.hash(pass, salt);
                    if (encoded != null) {
                        resolve(encoded);
                    } else {
                        reject("Password Encod Error!");
                    }
            
                })
            };
            
            let compare = (plain, encode) => {
                return new Promise((resolve, reject) => {
                    let con = bcrypt.compare(plain, encode);
                    if (con) {
                        resolve(con);
                    } else {
                        reject(con);
                    }
                })
            }
            
            module.exports = {
                encrypt,
                compare
            }
        `
        ,function (err) {
            if (err) throw err;
            console.log('saved')
          })
            
        }
}



let createEnv=()=>{
   
        fs.writeFile('./.env',`
        PORT = 1500
        SECRET = LoveUSoMuchMaGyi
    `
    ,function (err) {
        if (err) throw err;
        console.log('saved')
      })
        
    }


    let createCode=()=>{
   
        fs.writeFile('./sampleCode.js',`
        require('dotenv').config(); 
      
        let express = require('express'),
        app = express(),
      
        jwt = require('jsonwebtoken'),
        bodyParser = require('body-parser'),
        passport = require('passport'),
        JwtStrategy = require('passport-jwt').Strategy,
        ExtractJwt = require('passport-jwt').ExtractJwt;
        
        
           
        let User = require('./database/user');
        let jwtOptions = {};
        jwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();
        jwtOptions.secretOrKey = process.env.SECRET;
    
        
        let myStrategy = new JwtStrategy(jwtOptions, (payload, done) => {
            let email = payload.email;
            let name = payload.name;
            User.findByEmail(email)
                .then(user => {
                    if (user.name == name) {
                        done(null, user);
                    }
                })
                .catch(err => done(err, null));
        });
       
        app.use(bodyParser.json());
        app.use(bodyParser.urlencoded({ extended: true }));
        passport.use(myStrategy);


    
        app.post('/api/login', (req, res) => {
            let email = req.body.email;
            let pass = req.body.password;
    
            User.findByEmail(email)
                .then(user => {
                    passgen.compare(pass, user.password)
                        .then(result => {
                            let payload = { email: user.email, name: user.name };
                            let token = jwt.sign(payload, process.env.SECRET);
                            res.send({ con: true, token: token,msg:user , successmsg: "Successfully Login" });
                        })
                        .catch(err => res.send({ con: false, msg: err, errmsg: "Password Wrong" }))
                })
                .catch(err => res.send({ con: false, msg: err, errmsg: "No user with that email" }))
    
        });
    
        app.post('/api/register', (req, res) => {
            let name = req.body.name;
            let email = req.body.email;
            let password = req.body.password;
    
            passgen.encrypt(password)
                .then(pass => {
                    let uObj = {
                        "name": name,
                        "email": email,
                        "password": pass
                    };
                    User.save(uObj)
                        .then(user => res.send({ con: true, msg: user , successmsg: "Successfully Register"}))
                        .catch(err => res.send({ con: false, msg: err ,errmsg: "Something Wrong"}))
                }).catch(err => res.send({ con: false, msg: err }))
        });

        app.get('/user/all', passport.authenticate('jwt', { session: false }), (req, res) => {
            User.all()
                .then(result => res.json({ con: true, msg: result }))
                .catch(err => res.json({ con: false, msg: err }));
        })
        
        app.listen(process.env.PORT, () => {
            console.log("server is running at" + process.env.PORT);
        });
            
       
    `
    ,function (err) {
        if (err) throw err;
        console.log('saved')
      })
        
    }


    let createSample=()=>{
   
        fs.writeFile('./sampleIndex.js',`
        require('dotenv').config(); 
    let cors = require('cors');
    let express = require('express'),
    app = express();
    path = require('path'),
    jwt = require('jsonwebtoken'),
    bodyParser = require('body-parser'),
    passport = require('passport'),
    JwtStrategy = require('passport-jwt').Strategy,
    ExtractJwt = require('passport-jwt').ExtractJwt;
    
    
       
    let User = require('./database/user');
    let jwtOptions = {};
    jwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();
    jwtOptions.secretOrKey = process.env.SECRET;

    
    let myStrategy = new JwtStrategy(jwtOptions, (payload, done) => {
        let email = payload.email;
        let name = payload.name;
        User.findByEmail(email)
            .then(user => {
                if (user.name == name) {
                    done(null, user);
                }
            })
            .catch(err => done(err, null));
    });
    app.use(cors());
    app.use(express.static(path.join(__dirname, './assets')));
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: true }));
    passport.use(myStrategy);

    let userRoute = require("./routes/user")(express, jwt);
    let adminRoute = require('./routes/admin')(express, passport);
    let guestRoute = require('./routes/guest')(express);

    app.use("/user", userRoute);
	app.use("/admin", adminRoute);
    app.use("/", guestRoute);
    
    app.listen(process.env.PORT, () => {
        console.log("server is running at" + process.env.PORT);
    });
        
    `
    ,function (err) {
        if (err) throw err;
        console.log('saved')
      })
        
    }



module.exports = {
    createRoute,
    createHelper,
    createEnv,
    createSample,
    createCode

   }





